#! /usr/bin/env bash

set -euo pipefail

# -- absolute dirpath ---------------------------------------------------------

ABSOLUTE_DIRPATH="${0}"

# this works on both linux and macOS
if [[ -L "${0}" ]]; then
    ABSOLUTE_DIRPATH="$(readlink "${0}")"

    if [[ "${ABSOLUTE_DIRPATH}" == "" ]]; then
        >&2 echo "Cannot determine real path of the script."
        exit 1
    fi
fi

ABSOLUTE_DIRPATH="$(dirname "${ABSOLUTE_DIRPATH}")"

# -- load libraries -----------------------------------------------------------

. "${ABSOLUTE_DIRPATH}/vendor/fidian/ansi/ansi"
. "${ABSOLUTE_DIRPATH}/vendor/hologos/logger/logger"
. "${ABSOLUTE_DIRPATH}/libs/inputparser"
. "${ABSOLUTE_DIRPATH}/libs/utils"
. "${ABSOLUTE_DIRPATH}/libs/ssh"
. "${ABSOLUTE_DIRPATH}/libs/saptransport"
. "${ABSOLUTE_DIRPATH}/libs/renderer"

# -- initial setup ------------------------------------------------------------
TPCP_CURRENT_LABEL="${LOGGER_GLOBAL_LABEL}"

TPCP_LOG_DIRPATH_ROOT="tpcp-logs"
TPCP_LOG_DIRPATH="${TPCP_LOG_DIRPATH_ROOT}/$(date +'%Y%m%d-%H%M%S')"

if [[ -z "${TPCP_LOGGER_LEVEL+_}" ]]; then
    TPCP_LOGGER_LEVEL="I"
fi

if logger::level_is_lower "${TPCP_LOGGER_LEVEL}" "D" || logger::level_is_equal "${TPCP_LOGGER_LEVEL}" "D"; then
    TPCP_LOG_DIRPATH="${TPCP_LOG_DIRPATH_ROOT}/debug"
fi

logger::init "${TPCP_LOGGER_LEVEL}" "${TPCP_LOG_DIRPATH}/main.log"

logger::log "${TPCP_CURRENT_LABEL}" "I" "Program invoked as ${0} ${*}"

# kill all background processes
logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting up trap on EXIT."
trap tpcp::utils::exit_trap EXIT

logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting up trap on INTERRUPT and TERMINATE."
trap tpcp::utils::interrupt_trap INT TERM

# -- handle input parameters --------------------------------------------------

IP_TRANSPORT_LIST=()
IP_SYSTEM_LIST=()
IP_ACTION_LIST=()

if [[ ${#} -ne 3 ]]; then
    tpcp::utils::usage
    tpcp::utils::terminate
fi

tpcp::inputparser::parse_transport_list "${1}"
tpcp::inputparser::parse_system_list "${2}"
tpcp::inputparser::parse_action_list "${3}"

# -- main program -------------------------------------------------------------

if [[ -z "${TPCP_CONFIG_FILEPATH+_}" ]]; then
    tpcp::utils::terminate "Environment variable TPCP_CONFIG_FILEPATH is not set."
fi

echo
echo "Loading system informations from ${TPCP_CONFIG_FILEPATH}."

saptransport::load_ini_file "${TPCP_CONFIG_FILEPATH}"

TPCP_WORK_DIRPATH="/tmp/tpcp.${RANDOM}.${$}"

if [[ ! -d "${TPCP_WORK_DIRPATH}" ]]; then
    mkdir "${TPCP_WORK_DIRPATH}" || tpcp::utils::terminate "Cannot create work directory ${TPCP_WORK_DIRPATH}."
fi

# record initial status
for transport in "${IP_TRANSPORT_LIST[@]}"; do
    for system in "${IP_SYSTEM_LIST[@]}"; do
        for action in "${IP_ACTION_LIST[@]}"; do
            saptransport::record_status "${SAPTRANSPORT_STATUS_INITIAL}" "${transport}" "${system}" "${action}"
        done
    done
done

# process all transports on all systems
for transport in "${IP_TRANSPORT_LIST[@]}"; do
    saptransport::process_transport "${transport}" "IP_SYSTEM_LIST[@]" "IP_ACTION_LIST[@]" # hack to pass 2 arrays as argument
done &

sleep 1

# setup separate log file for renderer
TPCP_CURRENT_LABEL="RENDERER"

logger::init "${TPCP_CURRENT_LABEL}" "${TPCP_LOGGER_LEVEL}" "${TPCP_LOG_DIRPATH}/renderer.log"

logger::log "${TPCP_CURRENT_LABEL}" "I" "Starting the renderer."

while : ; do
    tpcp::renderer::render

    # BUG: When job dies, its status doesn't change and this function will return false forever.
    if saptransport::is_all_done; then
        sleep 1
        tpcp::renderer::render
        break
    fi

    sleep 1
done

logger::log "${TPCP_CURRENT_LABEL}" "I" "Everything is done. Stopping rendering."

wait

TPCP_CURRENT_LABEL="${LOGGER_GLOBAL_LABEL}"

logger::log "${TPCP_CURRENT_LABEL}" "I" "Everything is done."

# -- cleanup ------------------------------------------------------------------

tpcp::utils::cleanup
