#! /usr/bin/env bash

set -euo pipefail

# -- absolute dirpath ---------------------------------------------------------

ABSOLUTE_DIRPATH="${0}"

# this works on both linux and macOS
if [[ -L "${0}" ]]; then
    ABSOLUTE_DIRPATH="$(readlink "${0}")"

    if [[ "${ABSOLUTE_DIRPATH}" == "" ]]; then
        >&2 echo "Cannot determine real path of the script."
        exit 1
    fi
fi

ABSOLUTE_DIRPATH="$(dirname "${ABSOLUTE_DIRPATH}")"

# -- load libraries -----------------------------------------------------------

. "${ABSOLUTE_DIRPATH}/vendor/fidian/ansi/ansi"
. "${ABSOLUTE_DIRPATH}/vendor/hologos/logger/logger"
. "${ABSOLUTE_DIRPATH}/libs/inputparser"
. "${ABSOLUTE_DIRPATH}/libs/utils"
. "${ABSOLUTE_DIRPATH}/libs/ssh"
. "${ABSOLUTE_DIRPATH}/libs/saptransport"
. "${ABSOLUTE_DIRPATH}/libs/renderer"

# -- initial setup ------------------------------------------------------------
TPCP_VERSION="<<VERSION>>"
TPCP_CURRENT_LABEL="${LOGGER_GLOBAL_LABEL}"

if [[ -z "${TPCP_LOG_DIRPATH_ROOT+_}" ]] || [[ "${TPCP_LOG_DIRPATH_ROOT}" == "" ]]; then
    TPCP_LOG_DIRPATH_ROOT="."
fi

TPCP_LOG_DIRPATH_ROOT+="/tpcp-logs"
TPCP_LOG_DIRPATH="${TPCP_LOG_DIRPATH_ROOT}/$(date +'%Y%m%d-%H%M%S')"

if [[ -z "${TPCP_LOGGER_LEVEL+_}" ]]; then
    TPCP_LOGGER_LEVEL="I"
fi

if logger::level_is_lower "${TPCP_LOGGER_LEVEL}" "D" || logger::level_is_equal "${TPCP_LOGGER_LEVEL}" "D"; then
    TPCP_LOG_DIRPATH="${TPCP_LOG_DIRPATH_ROOT}/debug"

    # to prevent appending text to existing files and mixing files from different runs
    if [[ -e "${TPCP_LOG_DIRPATH}" ]]; then
        mv "${TPCP_LOG_DIRPATH}" "${TPCP_LOG_DIRPATH}.moved-on-$(date +'%Y%m%d-%H%M%S')" || { \
            >&2 echo
            >&2 ansi --bold --red "Aborting program to prevent mixing files from different runs. Cannot move ${TPCP_LOG_DIRPATH}."
            exit 1
        }
    fi
fi

logger::init "${TPCP_LOGGER_LEVEL}" "${TPCP_LOG_DIRPATH}/main.log"

logger::log "${TPCP_CURRENT_LABEL}" "I" "Running tpcp v${TPCP_VERSION}."
logger::log "${TPCP_CURRENT_LABEL}" "I" "Program invoked as ${0} ${*}"

# kill all background processes
logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting up trap on EXIT."
trap tpcp::utils::exit_trap EXIT

logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting up trap on INTERRUPT and TERMINATE."
trap tpcp::utils::interrupt_trap INT TERM

# -- handle input parameters --------------------------------------------------

IP_TRANSPORT_LIST=()
IP_SYSTEM_LIST=()
IP_ACTION_LIST=()

if [[ ${#} -eq 0 ]]; then
    tpcp::utils::usage
    logger::log "${TPCP_CURRENT_LABEL}" "C" "Terminating the program since no input given."
    tpcp::utils::terminate
fi

tpcp::inputparser::parse_input ${@}

# -- main program -------------------------------------------------------------

if [[ -z "${TPCP_CONFIG_FILEPATH+_}" ]]; then
    tpcp::utils::terminate "Environment variable TPCP_CONFIG_FILEPATH is not set."
fi

echo
echo "Loading system informations from ${TPCP_CONFIG_FILEPATH}."

saptransport::load_ini_file "${TPCP_CONFIG_FILEPATH}"

TPCP_WORK_DIRPATH="/tmp/tpcp.$(date +'%Y%m%d-%H%M%S').${RANDOM}.${$}"

if [[ ! -d "${TPCP_WORK_DIRPATH}" ]]; then
    mkdir "${TPCP_WORK_DIRPATH}" || tpcp::utils::terminate "Cannot create work directory ${TPCP_WORK_DIRPATH}."
fi

echo
echo "Caching information about transport domains."

# cache transport domains in advance so all background processes have full transport domains map
saptransport::cache_transport_domains "${IP_SYSTEM_LIST[@]}" "${IP_TRANSPORT_LIST[@]}"

# initialize all statuses
saptransport::initialize_statuses "IP_TRANSPORT_LIST[@]" "IP_SYSTEM_LIST[@]" "IP_ACTION_LIST[@]" # hack to pass 3 arrays as argument

# process all transports on all systems
for transport in "${IP_TRANSPORT_LIST[@]}"; do
    saptransport::process_transport "${transport}" "IP_SYSTEM_LIST[@]" "IP_ACTION_LIST[@]" # hack to pass 2 arrays as argument
done &

tpcp::renderer::render_table

wait

TPCP_CURRENT_LABEL="${LOGGER_GLOBAL_LABEL}"

logger::log "${TPCP_CURRENT_LABEL}" "I" "Everything is done."

# -- cleanup ------------------------------------------------------------------

tpcp::utils::cleanup
