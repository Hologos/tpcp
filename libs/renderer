#! /usr/bin/env bash

TPCP_RENDERER_ALREADY_RENDERED=0

TPCP_RENDERER_SYMBOL_INITIAL=" "
TPCP_RENDERER_SYMBOL_RUNNING="..."
TPCP_RENDERER_SYMBOL_FINISHED="✔"
TPCP_RENDERER_SYMBOL_FAILED="$(ansi --red --no-newline "✖")"
TPCP_RENDERER_SYMBOL_SKIPPED="-"
TPCP_RENDERER_SYMBOL_WAITING="w"

function tpcp::renderer::render_table() {
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "   [no-params]"

    # setup separate log file for renderer
    TPCP_CURRENT_LABEL="RENDERER"

    logger::init "${TPCP_CURRENT_LABEL}" "${TPCP_LOGGER_LEVEL}" "${TPCP_LOG_DIRPATH}/renderer.log"

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Starting the renderer."

    # prevent fast movement on the screen
    ansi::hideCursor

    while : ; do
        tpcp::renderer::__render_table

        # BUG: When job dies, its status doesn't change and this function will return false forever.
        if saptransport::is_all_done; then
            sleep 1
            tpcp::renderer::__render_table
            break
        fi

        sleep 0.2
    done

    # show cursor
    ansi::showCursor

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Everything is done. Stopping rendering."
}

function tpcp::renderer::__render_table() {
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "   [no-params]"

    tpcp::renderer::__clear_previous_output "${#IP_TRANSPORT_LIST[@]}" "${#IP_SYSTEM_LIST[@]}"

    local transport=""

    for transport in "${IP_TRANSPORT_LIST[@]}"; do
        logger::log "${TPCP_CURRENT_LABEL}"  "T" "Rendering output for transport ${transport}."

        local line=""

        echo

        line+="          " # transport name = 10 characters
        line+="     "      #    indentation =  5 characters
        line+="      "     #    system name =  6 characters
        line+="    "       #    indentation =  4 characters

        local action=""

        for action in "${IP_ACTION_LIST[@]}"; do
            line+=" ${action}"
        done

        echo "${line}"

        local system=""
        local system_index=0

        for system in "${IP_SYSTEM_LIST[@]}"; do
            logger::log "${TPCP_CURRENT_LABEL}"  "T" "Rendering action results for system ${system}."

            system_index=$(( ${system_index} + 1 ))
            line=""

            if [[ ${system_index} -eq 1 ]]; then
                line+="${transport}" # transport name = 10 characters
            else
                line+="          "   # transport name = 10 characters
            fi

            line+="     "     # indentation = 5 characters
            line+="${system}" # system name = 6 characters
            line+="     "     # indentation = 5 characters

            for action in "${IP_ACTION_LIST[@]}"; do
                logger::log "${TPCP_CURRENT_LABEL}"  "T" "Rendering action result "${action}" for system ${system}."

                local status="$(saptransport::read_status "${transport}" "${system}" "${action}")"

                # this has to be 4 characters long
                case "${status}" in
                    "${SAPTRANSPORT_STATUS_INITIAL}" )
                        line+=" "                                #   indentation = 1 character
                        line+="${TPCP_RENDERER_SYMBOL_INITIAL}"  # action result = 1 character
                        line+="  "                               #   indentation = 2 characters
                    ;;

                    "${SAPTRANSPORT_STATUS_RUNNING}" )
                        line+="${TPCP_RENDERER_SYMBOL_RUNNING}"  # action result = 3 characters
                        line+=" "                                #   indentation = 1 character
                    ;;

                    "${SAPTRANSPORT_STATUS_FAILED}" )
                        line+=" "                                #   indentation = 1 character
                        line+="${TPCP_RENDERER_SYMBOL_FAILED}"   # action result = 1 character
                        line+="  "                               #   indentation = 2 characters
                    ;;

                    "${SAPTRANSPORT_STATUS_FINISHED}" )
                        line+=" "                                #   indentation = 1 character
                        line+="${TPCP_RENDERER_SYMBOL_FINISHED}" # action result = 1 character
                        line+="  "                               #   indentation = 2 characters
                    ;;

                    "${SAPTRANSPORT_STATUS_SKIPPED}" )
                        line+=" "                                #   indentation = 1 character
                        line+="${TPCP_RENDERER_SYMBOL_SKIPPED}"  # action result = 1 character
                        line+="  "                               #   indentation = 2 characters
                    ;;

                    "${SAPTRANSPORT_STATUS_WAITING}" )
                        line+=" "                                #   indentation = 1 character
                        line+="${TPCP_RENDERER_SYMBOL_WAITING}"  # action result = 1 character
                        line+="  "                               #   indentation = 2 characters
                    ;;

                    *)
                        tpcp::utils::terminate "Unknown status of ${transport}->${system}->${action} is '${status}'."
                esac
            done

            echo "${line}"
        done
    done

    TPCP_RENDERER_ALREADY_RENDERED=1
}

function tpcp::renderer::__clear_previous_output() {
    local number_of_transports="${1}"
    local number_of_systems="${2}"

    logger::log "${TPCP_CURRENT_LABEL}"  "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "   number_of_transports=${number_of_transports}"
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "   number_of_systems=${number_of_systems}"

    # 1st line: empty
    # 2nd line: actions
    #     rest: system + results
    #
    # repeats for every transport
    local number_of_lines=$(( (1 + 1 + ${number_of_systems} ) * ${number_of_transports} ))

    logger::log "${TPCP_CURRENT_LABEL}"  "T" "Total number of rendered lines is ${number_of_lines}."

    # prepares 'canvas' for the output
    if [[ ${TPCP_RENDERER_ALREADY_RENDERED} -eq 0 ]]; then
        local i=0

        for i in $(seq ${number_of_lines}); do
            echo
        done

        ansi::deleteLines "${number_of_lines}"
    fi

    ansi::previousLine "${number_of_lines}"
}

function tpcp::render::print_log_location() {
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}"  "T" "   [no-params]"

    echo
    echo "Logs are located at ${TPCP_LOG_DIRPATH}."
}
