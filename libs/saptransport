#! /usr/bin/env bash

declare -A SAPTRANSPORT_HOSTNAMES_MAP
declare -A SAPTRANSPORT_TRANSPORT_DOMAINS_MAP

SAPTRANSPORT_ACTION_CPY="CPY"
SAPTRANSPORT_ACTION_ADD="ADD"
SAPTRANSPORT_ACTION_IMP="IMP"
SAPTRANSPORT_ACTION_DEL="DEL"

SAPTRANSPORT_STATUS_INITIAL="INITIAL"
SAPTRANSPORT_STATUS_RUNNING="RUNNING"
SAPTRANSPORT_STATUS_FAILED="FAILED"
SAPTRANSPORT_STATUS_FINISHED="FINISHED"
SAPTRANSPORT_STATUS_SKIPPED="SKIPPED"

SAPTRANSPORT_STATUS_FILENAME_PART="saptransport_status"
SAPTRANSPORT_ABORT_FILENAME="saptransport_abort"
SAPTRANSPORT_DOMAIN_CONTROLLER_FILENAME_PART="saptransport_domain_controller"

function saptransport::process_transport() {
    local transport="${1}"
    local system_list=("${!2}")
    local action_list=("${!3}")

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system_list=${system_list[*]}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action_list=${action_list[*]}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Processing transport ${transport}."

    local system=""

    for system in "${system_list[@]}"; do
        saptransport::__run_actions_on_system "${transport}" "${system}" "${action_list[@]}" &
    done

    wait
}

function saptransport::__run_actions_on_system() {
    local transport="${1}"
    local system="${2}"
    local action_list=("${@:3}")

    # setup separate log file for actions on system
    TPCP_CURRENT_LABEL="${transport}-${system}"

    logger::init "${TPCP_CURRENT_LABEL}" "${TPCP_LOGGER_LEVEL}" "${TPCP_LOG_DIRPATH}/${transport}-${system}.log"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action_list=${action_list[*]}"

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Running actions for transport ${transport} on system ${system}."

    local action=""

    for action in "${action_list[@]}"; do
        saptransport::__run_action_on_system "${transport}" "${system}" "${action}" || {
            logger::log "E" "Processing transport ${transport} on system ${system} failed while executing action ${action}."
            logger::log "${TPCP_CURRENT_LABEL}" "E" "Processing transport ${transport} on system ${system} failed while executing action ${action}."

            return 1
        }
    done

    logger::log "I" "All actions for transport ${transport} on system ${system} were successfully completed."
    logger::log "${TPCP_CURRENT_LABEL}" "I" "All actions for transport ${transport} on system ${system} were successfully completed."
}

function saptransport::__run_action_on_system() {
    local transport="${1}"
    local system="${2}"
    local action="${3}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action=${action}"

    if [[ -e "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_ABORT_FILENAME}" ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "W" "Aborting the program. Skipping all actions for transport ${transport} on system ${system}."

        exit 1
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Running action ${action} for transport ${transport} on system ${system}."

    saptransport::record_status "${SAPTRANSPORT_STATUS_RUNNING}" "${transport}" "${system}" "${action}"

    local sid="$(saptransport::__get_sid "${system}")"
    local client="$(saptransport::__get_client "${system}")"
    local transport_label="$(saptransport::__get_transport_label "${transport}")"

    if ! saptransport::__hostname_exists "${sid}"; then
        logger::log "${TPCP_CURRENT_LABEL}" "C" "Hostname for SID ${sid} not found."

        saptransport::record_status "${SAPTRANSPORT_STATUS_FAILED}" "${transport}" "${system}" "${action}"

        return 1
    fi

    local ssh_user="${sid,,}adm"
    local ssh_host="${SAPTRANSPORT_HOSTNAMES_MAP[${sid}]}"
    local ssh_port="22"
    local ssh_commands=()

    local domain_controller="${SAPTRANSPORT_TRANSPORT_DOMAINS_MAP[${sid}]}"
    local rc_threshold=0

    case "${action}" in
        "${SAPTRANSPORT_ACTION_CPY}" )
            # copies transport from source system
            local sid_source="$(saptransport::__get_sid_from_transport "${transport}")"

            local ssh_target_user="${ssh_user}"
            local ssh_target_host="${ssh_host}"
            local ssh_target_port="${ssh_port}"

            local ssh_user="${sid_source,,}adm"
            local ssh_host="${SAPTRANSPORT_HOSTNAMES_MAP[${sid_source}]}"
            local ssh_port="22"

            ssh_commands+=("scp -p -o ConnectTimeout=5 -o BatchMode=yes -P ${ssh_target_port} /usr/sap/trans/cofiles/K${transport_label}.${sid_source} ${ssh_target_user}@${ssh_target_host}:/usr/sap/trans/cofiles/")
            ssh_commands+=("scp -p -o ConnectTimeout=5 -o BatchMode=yes -P ${ssh_target_port} /usr/sap/trans/data/R${transport_label}.${sid_source} ${ssh_target_user}@${ssh_target_host}:/usr/sap/trans/data/")
        ;;

        "${SAPTRANSPORT_ACTION_ADD}" )
            ssh_commands+=("/usr/sap/${sid}/SYS/exe/run/tp ADDTOBUFFER ${transport} ${sid} client=${client} pf=/usr/sap/trans/bin/TP_DOMAIN_${domain_controller}.PFL")
        ;;

        "${SAPTRANSPORT_ACTION_IMP}" )
            rc_threshold=4

            ssh_commands+=("/usr/sap/${sid}/SYS/exe/run/tp IMPORT ${transport} ${sid} client=${client} U128 pf=/usr/sap/trans/bin/TP_DOMAIN_${domain_controller}.PFL")
        ;;

        "${SAPTRANSPORT_ACTION_DEL}" )
            ssh_commands+=("/usr/sap/${sid}/SYS/exe/run/tp DELFROMBUFFER ${transport} ${sid} client=${client} pf=/usr/sap/trans/bin/TP_DOMAIN_${domain_controller}.PFL")
        ;;

        * )
            tpcp::utils::terminate "'${action}' is not a valid action." # assert
    esac

    local ssh_command=""

    for ssh_command in "${ssh_commands[@]}"; do
        local rc=0

        tpcp::ssh::run_command                      \
            --rc-threshold="${rc_threshold}"        \
                                                    \
            "${ssh_user}"                           \
            "${ssh_host}"                           \
            "${ssh_port}"                           \
                                                    \
            "${ssh_command}"                        \
                1> >(tpcp::utils::capture_stdout)   \
                2> >(tpcp::utils::capture_stderr)   \
                || rc=${?}

        if [[ ${rc} -gt ${rc_threshold} ]]; then
            logger::log "${TPCP_CURRENT_LABEL}" "E" "There was an error while running action ${action} for transport ${transport} on system ${system}."

            saptransport::record_status "${SAPTRANSPORT_STATUS_FAILED}" "${transport}" "${system}" "${action}"

            return 1
        fi
    done

    saptransport::record_status "${SAPTRANSPORT_STATUS_FINISHED}" "${transport}" "${system}" "${action}"
}

function saptransport::record_status() {
    local status="${1}"
    local transport="${2}"
    local system="${3}"
    local action="${4}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   status=${status}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action=${action}"

    local subsequent_action
    local action_found=0
    local last_action=0

    # FIX: set status of subsequent action(s) first to fix the race condition in saptransport::is_all_done()
    if [[ "${status}" == "${SAPTRANSPORT_STATUS_FAILED}" ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Changing all statuses of subsequent actions to ${SAPTRANSPORT_STATUS_SKIPPED}."

        for subsequent_action in "${IP_ACTION_LIST[@]}"; do
            last_action=0

            if [[ ${action_found} -eq 0 ]] && [[ "${subsequent_action}" == "${action}" ]]; then # this expects that 2 identical actions cannot exist
                action_found=1
                last_action=1
                continue
            fi

            if [[ ${action_found} -eq 1 ]]; then
                saptransport::record_status "${SAPTRANSPORT_STATUS_SKIPPED}" "${transport}" "${system}" "${subsequent_action}"
            fi
        done
    elif [[ "${status}" == "${SAPTRANSPORT_STATUS_FINISHED}" ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Changing status of subsequent action to ${SAPTRANSPORT_STATUS_RUNNING} for finished action."

        for subsequent_action in "${IP_ACTION_LIST[@]}"; do
            last_action=0

            if [[ ${action_found} -eq 0 ]] && [[ "${subsequent_action}" == "${action}" ]]; then # this expects that 2 identical actions cannot exist
                action_found=1
                last_action=1
                continue
            fi

            if [[ ${action_found} -eq 1 ]]; then
                saptransport::record_status "${SAPTRANSPORT_STATUS_RUNNING}" "${transport}" "${system}" "${subsequent_action}"
                break
            fi
        done
    else
        # to pass the assert
        last_action=1
    fi

    # assert
    if [[ ${action_found} -eq 0 ]] && [[ ${last_action} -eq 0 ]]; then
        tpcp::utils::terminate "Action '${action}' was not found, cannot change status of subsequest action(s)."
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Changing status to ${status} for ${transport}->${system}->${action}."

    # FIX: set status of current action as last thing to fix the race condition in saptransport::is_all_done()
    echo -n "${status}" > "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_STATUS_FILENAME_PART}.${transport}.${system}.${action}"
}

function saptransport::read_status() {
    local transport="${1}"
    local system="${2}"
    local action="${3}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action=${action}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Loading status for ${transport}->${system}->${action}."

    echo -n "$( < "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_STATUS_FILENAME_PART}.${transport}.${system}.${action}" )" \
        || tpcp::utils::terminate "Cannot load status for ${transport}->${system}->${action}"
}

function saptransport::is_all_done() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"

    local status_filepath

    for status_filepath in "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_STATUS_FILENAME_PART}."*; do
        local status="$( < "${status_filepath}" )" || tpcp::utils::terminate "Cannot load status from file '${status_filepath}'."

        case "${status}" in
            # FIX: There was a race condition due to changing status is not an atomic operation.
            #      The status of subsequent action is changed first to fix thix.
            "${SAPTRANSPORT_STATUS_RUNNING}" )
                logger::log "${TPCP_CURRENT_LABEL}" "D" "Not yet done, status '${status}' is stored in '${status_filepath}'."

                return 1
            ;;
        esac
    done
}

function saptransport::__get_sid() {
    local system="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"

    echo -n "${system:0:3}"
}

function saptransport::__get_sid_from_transport() {
    local transport="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"

    echo -n "${transport:0:3}"
}

function saptransport::__get_client() {
    local system="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"

    echo -n "${system:3}"
}

function saptransport::__get_system_group_name() {
    local sid="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   sid=${sid}"

    echo -n "${sid:0:2}"
}

function saptransport::__get_system_group_role() {
    local sid="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   sid=${sid}"

    echo -n "${sid:2}"
}

function saptransport::__get_transport_label() {
    local transport="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"

    echo -n "${transport:4}"
}

function saptransport::__cache_transport_domain_from_sid() {
    local sid="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   sid=${sid}"

    if ! saptransport::__cache_transport_domain "${sid}"; then
        return 1
    fi

    return 0
}

function saptransport::cache_transport_domains() {
    local system_list=("${!1}")

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system_list=${system_list[*]}"

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Caching all transport domains in parallel."

    local sids=( $(saptransport::__make_sids_unique "${system_list[@]}") )

    # cache transport domains in parallel
    local sid

    for sid in "${sids[@]}"; do
        saptransport::__cache_transport_domain_from_sid "${sid}" &
    done

    wait

    # load transport domains here so all background processes have full transport domains map
    local cache_filepath

    for cache_filepath in "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_DOMAIN_CONTROLLER_FILENAME_PART}_"*; do
        local sid="${cache_filepath: -3}"

        SAPTRANSPORT_TRANSPORT_DOMAINS_MAP[${sid}]="$( < "${cache_filepath}" )" \
            || tpcp::utils::terminate "Cannot load domain controller from file '${cache_filepath}'."

        # TODO: maybe cache domain controller here to prevent reading from file in saptransport::__cache_transport_domain()
    done

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Caching all transport domains has finished."
}

function saptransport::__cache_transport_domain() {
    local sid="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   sid=${sid}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Caching transport domain for ${sid}."

    if ! saptransport::__hostname_exists "${sid}"; then
        logger::log "${TPCP_CURRENT_LABEL}" "C" "Hostname for SID ${sid} not found."

        return 1
    fi

    local ssh_user="${sid,,}adm"
    local ssh_host="${SAPTRANSPORT_HOSTNAMES_MAP[${sid}]}"
    local ssh_port="22"
    local ssh_command="egrep -x '^DOMAIN_([A-Z0-9]{3})\$' /usr/sap/trans/bin/DOMAIN.CFG | cut -d '_' -f 2"
    local cache_filepath="${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_DOMAIN_CONTROLLER_FILENAME_PART}_${sid}"

    local rc=0

    tpcp::ssh::run_command                      \
        "${ssh_user}"                           \
        "${ssh_host}"                           \
        "${ssh_port}"                           \
                                                \
        "${ssh_command}"                        \
            1> "${cache_filepath}"              \
            2> >(tpcp::utils::capture_stderr)   \
            || rc=1

    if [[ ${rc} -ne 0 ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "C" "Cannot get domain controller for ${sid} from ${ssh_user}@${ssh_host}:${ssh_port}."

        return 1
    fi

    local domain_controller="$( < "${cache_filepath}" )" \
        || tpcp::utils::terminate "Cannot load domain controller from file '${cache_filepath}'."

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Transport domain for ${sid} is ${domain_controller}."

    # cache domain controller as well
    if [[ "${sid}" != "${domain_controller}" ]]; then
        local cache_filepath_domain_controller="${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_DOMAIN_CONTROLLER_FILENAME_PART}_${domain_controller}"

        logger::log "${TPCP_CURRENT_LABEL}" "D" "Caching transport domain for domain controller ${domain_controller}."

        echo -n "${domain_controller}" > "${cache_filepath_domain_controller}"
    fi
}

function saptransport::__hostname_exists() {
    local sid="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   sid=${sid}"

    if ! [[ ${SAPTRANSPORT_HOSTNAMES_MAP[${sid}]+_} ]]; then
        return 1
    fi
}

function saptransport::load_ini_file() {
    local filepath="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   filepath=${filepath}"

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Loading ini file ${filepath}."

    if [[ ! -r "${filepath}" ]]; then
        tpcp::utils::terminate "Cannot read ini file ${filepath}."
    fi

    local line=""
    local line_number=0

    while read line; do
        line_number="$(( ${line_number} + 1 ))"

        logger::log "${TPCP_CURRENT_LABEL}" "D" "Reading line #${line_number} '${line}'."

        # skip lines beginning with ; (semicolon)
        # skip empty lines or containing only whitespaces
        if [[ "${line}" =~ ^\; ]] || [[ "${line}" =~ ^[[:space:]]*$ ]]; then
            logger::log "${TPCP_CURRENT_LABEL}" "D" "Skipping line #${line_number} '${line}'."

            continue
        fi

        # SID=hostname
        if ! [[ ${line} =~ ^[A-Z0-9]{3}=(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$ ]]; then
            tpcp::utils::terminate "Malformed ini file ${filepath}, line #${line_number} '${line}'."
        fi

        local sid="${line%=*}"
        local hostname="${line#*=}"

        logger::log "${TPCP_CURRENT_LABEL}" "D" "SID=${sid}"
        logger::log "${TPCP_CURRENT_LABEL}" "D" "hostname=${hostname}"

        SAPTRANSPORT_HOSTNAMES_MAP[${sid}]="${hostname}"
    done < "${filepath}"
}

function saptransport::__make_sids_unique() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   args=${*}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Removing duplicate SIDs from the list '${*}'."

    echo -n "${@}" | tr ' ' "\n" | cut -c 1-3 | sort | uniq
}
