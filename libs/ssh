#! /usr/bin/env bash

readonly SSH_MASTER_CONTROL_SOCKET_FILEPATH="/tmp/tpcp-ssh-master-control-%r@%h:%p"

function tpcp::ssh::__close_master_connection() {
    local user="${1}"
    local host="${2}"
    local port="${3}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME[0]}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   user=${user}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   host=${host}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   port=${port}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Closing master connection to ${user}@${host}:${port}."

    local rc=0

    ssh                                                 \
        -o ConnectTimeout=5                             \
        -o BatchMode=yes                                \
        -o ForwardX11=no                                \
        -o ForwardAgent=yes                             \
        -S "${SSH_MASTER_CONTROL_SOCKET_FILEPATH}"      \
        -p "${port}"                                    \
                                                        \
        -O stop                                         \
                                                        \
        "${user}"@"${host}" || rc=${?}

    if [[ ${rc} -eq 0 ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Master connection to ${user}@${host}:${port} successfully closed (rc=${rc})."
    else
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Closing master connection to ${user}@${host}:${port} failed (rc=${rc})."
    fi

    return ${rc}
}

function tpcp::ssh::__is_master_connection_alive() {
    local user="${1}"
    local host="${2}"
    local port="${3}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME[0]}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   user=${user}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   host=${host}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   port=${port}"

    local rc=0

    ssh                                                 \
        -o ConnectTimeout=5                             \
        -o BatchMode=yes                                \
        -o ForwardX11=no                                \
        -o ForwardAgent=yes                             \
        -S "${SSH_MASTER_CONTROL_SOCKET_FILEPATH}"      \
        -p "${port}"                                    \
                                                        \
        -O check                                        \
                                                        \
        "${user}"@"${host}" || rc=${?}

    if [[ ${rc} -eq 0 ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Checking master connection to ${user}@${host}:${port} was successful (rc=${rc})."
    else
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Checking master connection to ${user}@${host}:${port} failed (rc=${rc})."
    fi

    return ${rc}
}

function tpcp::ssh::__create_master_connection() {
    local user="${1}"
    local host="${2}"
    local port="${3}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME[0]}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   user=${user}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   host=${host}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   port=${port}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Creating master connection to ${user}@${host}:${port}."

    # Explanation:
    #   -M                   - places the ssh client into ``master'' mode for connection sharing
    #   -N                   - do not execute a remote command
    #   -f                   - requests ssh to go to background just before command execution.
    #   -o ControlPersist=2m - keep the connection open for 2 minutes

    local rc=0

    ssh                                                 \
        -M                                              \
        -N                                              \
        -f                                              \
        -o ConnectTimeout=5                             \
        -o ControlMaster=yes                            \
        -o ControlPersist=2m                            \
        -o BatchMode=yes                                \
        -o ForwardX11=no                                \
        -o ForwardAgent=yes                             \
        -S "${SSH_MASTER_CONTROL_SOCKET_FILEPATH}"      \
        -p "${port}"                                    \
                                                        \
        "${user}"@"${host}" || rc=${?}

    if [[ ${rc} -eq 0 ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Master connection to ${user}@${host}:${port} successfully created (rc=${rc})."
    else
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Creating master connection to ${user}@${host}:${port} failed (rc=${rc})."
    fi

    return ${rc}
}

function tpcp::ssh::run_command() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME[0]}():"

    local rc_threshold=0

    case "${1}" in
        --rc-threshold=* )
            logger::log "${TPCP_CURRENT_LABEL}" "T" "   ${1}"

            rc_threshold="$(echo "${1}" | cut -d "=" -f 2)"

            shift
        ;;
    esac

    local user="${1}"
    local host="${2}"
    local port="${3}"
    local command="${4}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "   user=${user}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   host=${host}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   port=${port}"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   command=${command}"

    if ! tpcp::ssh::__is_master_connection_alive "${user}" "${host}" "${port}"; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Master connection to ${user}@${host}:${port} is not alive."

        tpcp::ssh::__create_master_connection "${user}" "${host}" "${port}"
    else
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Master connection to ${user}@${host}:${port} is still alive."
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Running command '${command}' on ${user}@${host}:${port}."

    local rc=0

    ssh                                                 \
        -o ConnectTimeout=5                             \
        -o BatchMode=yes                                \
        -o ForwardX11=no                                \
        -o ForwardAgent=yes                             \
        -S "${SSH_MASTER_CONTROL_SOCKET_FILEPATH}"      \
        -p "${port}"                                    \
                                                        \
        "${user}"@"${host}"                             \
                                                        \
        "${command}" || rc=${?}

    if [[ ${rc} -le ${rc_threshold} ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Command '${command}' on ${user}@${host}:${port} finished successfully (rc=${rc}, rc-threshold=${rc_threshold})."
    else
        logger::log "${TPCP_CURRENT_LABEL}" "D" "Command '${command}' on ${user}@${host}:${port} failed (rc=${rc}, rc-threshold=${rc_threshold})."
    fi

    return ${rc}
}
