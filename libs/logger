#! /usr/bin/env bash

_LOGGER_LEVELS_MAP=(
    "A" # 0: all
    "T" # 1: trace
    "D" # 2: debug
    "I" # 3: info
    "N" # 4: notice
    "W" # 5: warning
    "E" # 6: error
    "C" # 7: critical
)

function logger::__print_call_stack() {
    local stack_size="${#FUNCNAME[@]}"

    >&2 echo
    >&2 echo "Stack trace:"

    for (( i=$(( stack_size - 1 )); i >= 2; i-- )); do
        local function_name="${FUNCNAME[$(( i - 1 ))]:-"MAIN"}"
        local source_line_number="${BASH_LINENO[$(( i - 1 ))]}"
        local function_source="${BASH_SOURCE[$i]:-"non_file_source"}"

        # TODO: align to right
        >&2 echo -n "   "
        >&2 echo "$(( stack_size - i )): ${function_source}:${source_line_number} > ${function_name}()"
    done
}

function logger::__get_level_index() {
    local level="${1}"

    for logger_level_index in "${!_LOGGER_LEVELS_MAP[@]}"; do
        if [[ "${_LOGGER_LEVELS_MAP[${logger_level_index}]}" == "${level}" ]]; then
            printf ${logger_level_index}
            return
        fi
    done

    logger::__terminate "Level '${level}' is not supported."
}

function logger::__message() {
    local level="${1}"
    local message="${2}"

    local datetime="$(date +'%d.%m.%Y %H:%M:%S')"

    >&2 echo "[${datetime}] ${level}: ${message}"
}

function logger::__terminate() {
    local message="${1}"

    logger::__message "C" "${message}"
    logger::__print_call_stack

    exit 1
}

function logger::__is_level_set() {
    if [[ -z ${_LOGGER_LEVEL+x} ]]; then
        logger::__terminate "Level is not set."
    fi
}

function logger::__validate_level() {
    local level="${1}"

    local level_index="$(logger::__get_level_index "${level}")"
}

function logger::init() {
    local level="${1}"

    logger::__validate_level "${level}"

    _LOGGER_LEVEL="${level}"
}

# function logger::set_level() {
#     return
# }

# function logger::get_level() {
#     return
# }

function logger::log() {

    local level="${1}"
    # local message="${2}"
    local message="${@:2}" # TODO: FIX array

    logger::__is_level_set

    local level_index="$(logger::__get_level_index "${level}")"
    local global_level_index="$(logger::__get_level_index "${_LOGGER_LEVEL}")"

    if [[ ${level_index} -lt ${global_level_index} ]]; then
        return
    fi

    logger::__message "${level}" "${message}"
}
