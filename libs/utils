#! /usr/bin/env bash

function tpcp::utils::usage() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"

    >&2 echo
    >&2 echo "Usage: $0 <transport-list> <system-list> <action-list>"
    >&2 echo
    >&2 echo "    <transport-list>"
    >&2 echo "        List of transport names (eg: ABCK000001)."
    >&2 echo
    >&2 echo "    <system-list>"
    >&2 echo "        List of system names in form of [SID][CLIENT] (eg: ABC000)."
    >&2 echo
    >&2 echo "    <action-list>"
    >&2 echo "        List of actions."
    >&2 echo
    >&2 echo "        Possible values:"
    >&2 echo "            ${SAPTRANSPORT_ACTION_CPY} - copy transport from source system to destination system"
    >&2 echo "            ${SAPTRANSPORT_ACTION_ADD} - add transport into import queue"
    >&2 echo "            ${SAPTRANSPORT_ACTION_IMP} - import transport into system"
    >&2 echo "            ${SAPTRANSPORT_ACTION_DEL} - delete transport from import queue"
    >&2 echo
    >&2 echo "    Environment variables"
    >&2 echo "        TPCP_SYSTEM_FILEPATH - filepath to system definition ini file"
    >&2 echo "        TPCP_LOGGER_LEVEL - level for logger library (default is I)"
    >&2 echo "        TPCP_LOG_DIRPATH_ROOT - dirpath to directory (relative or absolute) where to store logs (default is .)"
}

function tpcp::utils::terminate() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"

    if [[ ${#} -eq 0 ]]; then
        logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"
    else
        local message="${1}"

        logger::log "${TPCP_CURRENT_LABEL}" "T" "   message=${message}"

        # also print to STDERR
        >&2 echo
        >&2 echo "The program has been terminated due to a critical error:"
        >&2 echo "${message}"

        logger::log "${TPCP_CURRENT_LABEL}" "C" "${message}"
    fi

    exit 1
}

function tpcp::utils::contains_duplicates() {
    local string="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   string=${string}"

    if [[ "$(echo -n "${string}" | tr ' ' "\n" | sort | uniq -d)" != "" ]]; then
        return 0
    fi

    return 1
}

function tpcp::utils::interrupt_trap() {
    logger::log "T" "Running ${FUNCNAME}():"
    logger::log "T" "   [no-params]"

    logger::log "C" "The program is being killed! Killing all background processes."

    # create signal file to stop futher processing
    touch "${TPCP_WORK_DIRPATH}/${SAPTRANSPORT_ABORT_FILENAME}"
}

function tpcp::utils::exit_trap() {
    logger::log "T" "Running ${FUNCNAME}():"
    logger::log "T" "   [no-params]"

    tpcp::render::print_log_location
}

function tpcp::utils::cleanup() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"

    logger::log "${TPCP_CURRENT_LABEL}" "I" "Cleaning up temporary files."

    rm -rf "${TPCP_WORK_DIRPATH}"
}

function tpcp::utils::capture_stdout() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"

    local msg=""

    while read msg; do
        logger::log "${TPCP_CURRENT_LABEL}" "I" "${msg}"
    done
}

function tpcp::utils::capture_stderr() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   [no-params]"

    local msg=""

    while read msg; do
        logger::log "${TPCP_CURRENT_LABEL}" "W" "${msg}"
    done
}
