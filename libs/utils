#! /usr/bin/env bash

TPCP_STATUS_FILENAME_PART="tpcp_statuses"

function tpcp::utils::usage() {
    logger::log "T" "Running ${FUNCNAME}():"
    logger::log "T" "   [no-params]"

    >&2 echo
    >&2 echo "Usage: $0 <transport-list> <system-list> <action-list>"
    >&2 echo ""
    # >&2 echo "OPTIONS"
    >&2 echo "    <transport-list>"
    >&2 echo "        List of transport names (eg: ABCK000001)."
    >&2 echo ""
    >&2 echo "    <system-list>"
    >&2 echo "        List of system names in form of [SID][CLIENT] (eg: ABC000)."
    >&2 echo ""
    >&2 echo "    <action-list>"
    >&2 echo "        List of actions."
    >&2 echo ""
    >&2 echo "        Possible values:"
    >&2 echo "            ${SAPTRANSPORT_ACTION_CPY} - copy transport from source system to destination system"
    >&2 echo "            ${SAPTRANSPORT_ACTION_ADD} - add transport into import queue"
    >&2 echo "            ${SAPTRANSPORT_ACTION_IMP} - import transport into system"
    >&2 echo "            ${SAPTRANSPORT_ACTION_DEL} - delete transport from import queue"
}

function tpcp::utils::terminate() {
    logger::log "T" "Running ${FUNCNAME}():"

    if [[ ${#} -eq 0 ]]; then
        logger::log "T" "   [no-params]"
    else
        local message="${1}"

        logger::log "T" "   message=${message}"

        logger::log "C" "${message}"
    fi

    exit 1
}

function tpcp::utils::record_status() {
    local status="${1}"
    local work_dirpath="${2}"
    local transport="${3}"
    local system="${4}"
    local action="${5}"

    logger::log "T" "Running ${FUNCNAME}():"
    logger::log "T" "   status=${status}"
    logger::log "T" "   work_dirpath=${work_dirpath}"
    logger::log "T" "   transport=${transport}"
    logger::log "T" "   system=${system}"
    logger::log "T" "   action=${action}"

    logger::log "D" "Changing status to ${status} for ${transport}->${system}->${action}."

    echo "${status}" > "${work_dirpath}/${TPCP_STATUS_FILENAME_PART}.${transport}.${system}.${action}"

    if [[ "${status}" == "${SAPTRANSPORT_STATUS_FAILED}" ]]; then
        logger::log "D" "Changing all statuses of subsequent actions."

        local subsequent_action
        local action_found=0

        for subsequent_action in "${IP_ACTION_LIST[@]}"; do
            if [[ ${action_found} -eq 0 ]] && [[ "${subsequent_action}" == "${action}" ]]; then # this expects that 2 identical actions cannot exist
                action_found=1
                continue
            fi

            if [[ ${action_found} -eq 1 ]]; then
                tpcp::utils::record_status "${SAPTRANSPORT_STATUS_SKIPPED}" "${work_dirpath}" "${transport}" "${system}" "${subsequent_action}"
            fi
        done
    fi
}
