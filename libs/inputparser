#! /usr/bin/env bash

function tpcp::inputparser::parse_input() {
    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   input=${*}"

    local MODE_TRANSPORT="transport"
    local MODE_SYSTEM="system"
    local MODE_ACTION="action"
    local MODE_ERROR="error"

    local mode="${MODE_TRANSPORT}"

    logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting parsing mode to '${mode}'."

    while [[ ${#} -ne 0 ]] && [[ "${1}" != "" ]]; do
        local input="${1}"

        case "${mode}" in
            "${MODE_TRANSPORT}" )
                logger::log "${TPCP_CURRENT_LABEL}" "D" "Validating input '${input}' as transport."

                if ! tpcp::inputparser::is_transport "${input}"; then
                    mode="${MODE_SYSTEM}"

                    logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting parsing mode to '${mode}'."

                    continue
                fi

                IP_TRANSPORT_LIST+=( "${input}" )
            ;;

            "${MODE_SYSTEM}" )
                logger::log "${TPCP_CURRENT_LABEL}" "D" "Validating input '${input}' as system."

                if ! tpcp::inputparser::is_system "${input}"; then
                    logger::log "${TPCP_CURRENT_LABEL}" "D" "'${input}' is not a valid system name."

                    mode="${MODE_ACTION}"

                    logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting parsing mode to '${mode}'."

                    continue
                fi

                IP_SYSTEM_LIST+=( "${input}" )
            ;;

            "${MODE_ACTION}" )
                logger::log "${TPCP_CURRENT_LABEL}" "D" "Validating input '${input}' as action."

                if ! tpcp::inputparser::is_action "${input}"; then
                    logger::log "${TPCP_CURRENT_LABEL}" "D" "'${input}' is not a valid action."

                    mode="${MODE_ERROR}"

                    logger::log "${TPCP_CURRENT_LABEL}" "D" "Setting parsing mode to '${mode}'."

                    continue
                fi

                IP_ACTION_LIST+=( "${input}" )
            ;;

            * )
                tpcp::utils::terminate "'${input}' is not a valid transport, system nor action."
        esac

        shift
    done

    if tpcp::utils::contains_duplicates "${IP_TRANSPORT_LIST[*]}"; then
        tpcp::utils::terminate "Transport list cannot have duplicates."
    fi

    if tpcp::utils::contains_duplicates "${IP_SYSTEM_LIST[*]}"; then
        tpcp::utils::terminate "System list cannot have duplicates."
    fi

    if tpcp::utils::contains_duplicates "${IP_ACTION_LIST[*]}"; then
        tpcp::utils::terminate "Action list cannot have duplicates."
    fi
}

function tpcp::inputparser::is_transport() {
    local transport="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   transport=${transport}"

    if [[ "${transport}" =~ ^[A-Z0-9]{3}K[A-Z0-9]{6}$ ]]; then
        return 0
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "D" "'${transport}' is not a valid transport name."

    return 1
}

function tpcp::inputparser::is_system() {
    local system="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   system=${system}"

    if [[ "${system}" =~ ^[A-Z0-9]{3}[0-9]{3}$ ]]; then
        return 0
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "D" "'${system}' is not a valid system name."

    return 1
}

function tpcp::inputparser::is_action() {
    local action="${1}"

    logger::log "${TPCP_CURRENT_LABEL}" "T" "Running ${FUNCNAME}():"
    logger::log "${TPCP_CURRENT_LABEL}" "T" "   action=${action}"

    if [[ "${action}" =~ ^(${SAPTRANSPORT_ACTION_CPY}|${SAPTRANSPORT_ACTION_ADD}|${SAPTRANSPORT_ACTION_IMP}|${SAPTRANSPORT_ACTION_DEL})$ ]]; then
        return 0
    fi

    logger::log "${TPCP_CURRENT_LABEL}" "D" "'${action}' is not a valid action."

    return 1
}
